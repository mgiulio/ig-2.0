#!/usr/bin/env node

var 
	fs = require('fs-extra'),
	FILE_ENCODING = 'utf-8',
	EOL = '\n'
;

var targets = {
	dev: function() {
		css();
		
		fs.copySync('src/index.html', 'dist/index.html', {replace: true});
		fs.copySync('src/script.js', 'dist/script.js', {replace: true});
		fs.copySync(
			'C:/Dropbox/mgiulio/prjexs/block-ui/blockui.js', //'src/blockui.js', 
			'dist/blockui.js', 
			{replace: true}
		);
	}/*,
	rel: function() {
		copyToDist(minify(transpile(fse.readFileSync(src))));
	},
	transpile: function() {
		copyToDist(transpile(fse.readFileSync(src)));
	}
	*/
};

run();

function run() {
	var 
		argv = process.argv,
		target
	;
	if (argv.length === 3)
		target = argv[2];
	else
		target = 'dev';
	
	try {
		console.log('Running ' + target + ' target');
		targets[target]();
	}
	catch(e) {
		console.log('Build process failed: ' + e.message);
	}
}	

/*
 * Tasks
 */
 
 function css() {
	var postcss = require('postcss');
	
	var input = fs.readFileSync('src/style.css', 'utf8');

	postcss([
		require('postcss-inline-comment')(),
		require('postcss-import')({
			path: 'src'}),
		require('postcss-custom-properties')(),
		require('postcss-calc')({
			preserve: false,
			precision: 5
		}),
		require('autoprefixer-core')()
	])
	.process(input, { 
		//from: 'src/app.css', 
		//to: 'app.css' 
	})
	.then(function(result) {
		fs.writeFileSync('dist/style.css', result.css);
        //if ( result.map ) fs.writeFileSync('app.css.map', result.map);
    });
	/* var output = cssnext(input, {
		'import': {
			path: 'src'
		}
	}); */
}
 
function transpile(code) {
	console.log('Transpilation...');
	
	var babel = require('babel-core');
	
	var result = babel.transform(code);
	
	return result.code;
}
	
function minify(code) {
	console.log('Minification...');
	
	var UglifyJS = require('uglify-js');
	
	try {
		var result = UglifyJS.minify(code, {
			fromString: true
			//outSourceMap: "inline-editor.js.map"
		});
	} catch (e) {
		console.log('*** Uglify JS error ***');
		console.log(e.message + ' in ' +  e.filename + ' @ ' + e.line + ':' + e.col);
		throw e;
	}
	
	return result.code;
}

function copyToDist(code) {
	console.log('Writing processed code to ' + dest + '...');
	
	fse.writeFileSync(dest, code);
	//fse.writeFileSync(dest + '.map', uglifyResult.map);
}
		
function cleanDist() {
	notify('Cleaning dit directory');
	fse.emptyDirSync('dist');
}

function notify(msg) {
	console.log('=== ' + msg + '===');
}
